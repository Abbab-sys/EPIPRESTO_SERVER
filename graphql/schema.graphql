input VendorAccountInput{
    shopName:String!
    address:String!
    email:String!
    phone:String!
    username:String!
    password:String!
}
type HttpResponse{
    code:Int!
    message:String!
}
type VendorAccount{
    _id:ID!
    email:String!
    password:String!
    phone:String!
    username:String!
    store:Store!
}

type Disponibility{
    day:Day!
    activesHours:[ActivesHours!]!
}
type ActivesHours{
    openingHour:String!
    endingHour:String!
}
enum ApiType{
    SHOPIFY,
    WOOCOMMERCE
}
enum Day{
    MONDAY,
    TUESDAY,
    WEDNESDAY,
    THURSDAY,
    FRIDAY,
    SATURDAY,
    SUNDAY
}
input ShopifyCredentials{
    apiToken:String!
    shopDomain:String!
}
input WoocommerceCredentials{
    apiToken:String!
    shopDomain:String!
}

type Store{
    _id:ID!
    name:String!
    address:String!
    products:[Product!]!
    disponibilities:[Disponibility!]!
}
type Product{
    _id:ID!
    relatedStore:Store!
    title:String!
    brand:String
    published:Boolean!
    tags:[String!]!
    imgSrc:String!
    variants:[ProductVariant!]!
}
type ProductVariant{
    _id:ID!
    relatedProduct:Product!
    displayName:String!
    availableForSale:Boolean!
    price:Float!
    sku:String
    taxable:Boolean!
    imgSrc:String!
    byWeight:Boolean!
    stock:Int!
}


type Query{
    loginVendor(email:String!,password:String!):VendorAccount
    isVendorUsernameUsed(username:String!):Boolean!
    isVendorEmailUsed(email:String!):Boolean!
    getStoreById(idStore:ID!):Store
    getProductById(idProduct:ID!):Product
    getProductVariantById(idVariant:ID!):ProductVariant
}
type Mutation{
    vendorSignUp(accountInput:VendorAccountInput):VendorAccount
    synchronizeWoocommerceStore(woocommerceCreds:WoocommerceCredentials!):HttpResponse!
    synchronizeShopifyStore(shopifyCreds:ShopifyCredentials!):HttpResponse!
}
