type Mutation{
    vendorSignUp(accountInput:VendorAccountInput):HttpResponse!
    clientSignUp(accountInput:ClientAccountInput):HttpResponse!
    verifyAccount(token:String!):AccountResponse!
    verifyClientAccount(token:String!):ClientAccountResponse!

    synchronizeWoocommerceStore(woocommerceCreds:WoocommerceCredentials!):HttpResponse!
    synchronizeShopifyStore(shopifyCreds:ShopifyCredentials!):HttpResponse!

    updateProductVariant(variantId:ID!,fieldsToUpdate:UpdateProductVariant!): ProductVariantResponse!
    updateProductsVariants(variantsToUpdate:[UpdateProductVariant!]!): HttpResponse!

    updateProduct(productId:ID!,fieldsToUpdate:UpdateProduct!): ProductResponse!
    updateStore(storeId:ID!,fieldsToUpdate:UpdateStore!): StoreResponse!
    updateVendorAccount(vendorId:ID!,fieldsToUpdate:UpdateVendorAccount!): VendorAccountResponse!
    updateClientAccount(clientId:ID!,fieldsToUpdate:UpdateClientAccount!): ClientAccountResponse!

    addNewVariantToProduct(productId:ID!,newVariant:ProductVariantInput!):HttpResponse!
    addNewVariantsToProduct(productId:ID!,newVariants:[ProductVariantInput!]!):HttpResponse!

    removeVariantById(productVariantId:ID!):HttpResponse!
    removeVariantsByIds(productVariantsIds:[ID!]!):HttpResponse!

    addNewProductToStore(storeId:ID!,newProduct:ProductInput!):HttpResponse!
    removeProductById(productId:ID!):HttpResponse!

    submitOrder(clientId:ID!,productsVariantsToOrder:[ProductOrderedInput!]!,paymentMethod:PaymentMethod!):OrderResponse!
    updateOrderStatus(storeId:ID!,orderId:ID!,newStatus:OrderStatus!):HttpResponse!

    sendMessageToChat(message:MessageInput!):HttpResponse!
}

union AccountResponse = VendorAccountResponse | ClientAccountResponse
